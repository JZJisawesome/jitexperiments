/*
 * File:    amd64asm.rs
 * Brief:   TODO
 *
 * Copyright: Copyright (C) TODO John Jekel
 * See the LICENSE file at the root of the project for licensing info.
 *
 * TODO longer description
 *
*/

/*!
 * TODO rustdoc for this file here
*/

/* ------------------------------------------------------------------------------------------------
 * Submodules
 * --------------------------------------------------------------------------------------------- */

//TODO (includes "mod ..." and "pub mod ...")

/* ------------------------------------------------------------------------------------------------
 * Uses
 * --------------------------------------------------------------------------------------------- */

//TODO (includes "use ..." and "extern crate ...")

/* ------------------------------------------------------------------------------------------------
 * Macros
 * --------------------------------------------------------------------------------------------- */

//TODO (also pub(crate) use the_macro statements here too)

/* ------------------------------------------------------------------------------------------------
 * Constants
 * --------------------------------------------------------------------------------------------- */

//TODO

/* ------------------------------------------------------------------------------------------------
 * Static Variables
 * --------------------------------------------------------------------------------------------- */

//TODO

/* ------------------------------------------------------------------------------------------------
 * Types
 * --------------------------------------------------------------------------------------------- */

enum Amd64Reg {
    Eax,
    Ecx,
    Edx,
    Ebx,
    Esp,
    Ebp,
    Esi,
    Edi,
    R8d,
    R9d,
    R10d,
    R11d,
    R12d,
    R13d,
    R14d,
    R15d
}

//Designed to be nice to work with to emulate RISC-V instructions
//All operations are 32-bit since that's really all we need for RV32I
enum NiceAmd64Inst {
    MovRToR(Amd64Reg, Amd64Reg),
    Li(Amd64Reg, u32),
    Nop,
    Ret
}

struct Amd64Asm {
    bytes: Vec<u8>
}

/* ------------------------------------------------------------------------------------------------
 * Associated Functions and Methods
 * --------------------------------------------------------------------------------------------- */

impl Amd64Reg {
    fn num(&self) -> u8 {//Number between 0 and 15
        match self {
            Amd64Reg::Eax  => 0,
            Amd64Reg::Ecx  => 1,
            Amd64Reg::Edx  => 2,
            Amd64Reg::Ebx  => 3,
            Amd64Reg::Esp  => 4,
            Amd64Reg::Ebp  => 5,
            Amd64Reg::Esi  => 6,
            Amd64Reg::Edi  => 7,
            Amd64Reg::R8d  => 8,
            Amd64Reg::R9d  => 9,
            Amd64Reg::R10d => 10,
            Amd64Reg::R11d => 11,
            Amd64Reg::R12d => 12,
            Amd64Reg::R13d => 13,
            Amd64Reg::R14d => 14,
            Amd64Reg::R15d => 15
        }
    }

    fn extended(&self) -> u8 {//The revavent bit in REX
        self.num() >> 3
    }

    fn lower(&self) -> u8 {//Lower 3 bits of the register number
        self.num() & 0b111
    }
}

impl Amd64Asm {
    fn new() -> Amd64Asm {
        Amd64Asm {
            bytes: Vec::new()
        }
    }

    fn add_inst(&mut self, inst: NiceAmd64Inst) {
        match inst {
            NiceAmd64Inst::MovRToR(src, dst) => {
                self.bytes.push(0x40 | (src.extended() << 2) | dst.extended());
                self.bytes.push(0x89);
                self.bytes.push(0xC0 | (src.lower() << 3) | dst.lower());
            },
            NiceAmd64Inst::Nop => {
                self.bytes.push(0x90);
            },
            NiceAmd64Inst::Ret => {
                self.bytes.push(0xC3);
            }
            _ => todo!()
        }
    }
}

/* ------------------------------------------------------------------------------------------------
 * Traits And Default Implementations
 * --------------------------------------------------------------------------------------------- */

//TODO

/* ------------------------------------------------------------------------------------------------
 * Trait Implementations
 * --------------------------------------------------------------------------------------------- */

//TODO

/* ------------------------------------------------------------------------------------------------
 * Functions
 * --------------------------------------------------------------------------------------------- */

//TODO

/* ------------------------------------------------------------------------------------------------
 * Tests
 * --------------------------------------------------------------------------------------------- */

//TODO

/* ------------------------------------------------------------------------------------------------
 * Benchmarks
 * --------------------------------------------------------------------------------------------- */

//TODO
